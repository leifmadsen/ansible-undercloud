---
# -------------------------------------------------------
# -- Configures a virt-host and spins up undercloud VM --
# -------------------------------------------------------
# some pieces borrowed from: http://giovannitorres.me/create-a-linux-lab-on-kvm-using-cloud-images.html

- name: Create the working directory
  file:
    path: "{{ virt_working_directory }}"
    state: directory

- name: Check if CentOS generic image exists
  stat:
    path: "{{ virt_working_directory }}/{{ virt_image_name }}"
  register: generic_cloud_image

# download the generic cloud image if it doesn't exist
- name: Download the generic cloud image
  get_url:
    url: "{{ virt_generic_cloud_image }}"
    dest: "{{ virt_working_directory }}"
  when: not generic_cloud_image.stat.exists

- name: Install deps
  package:
    name: genisoimage
    state: present
  with_items:
    - genisoimage
    - virt-install

- name: See if disk exists
  stat:
    path: "{{ virt_working_directory }}/disk.{{ virt_image_name }}"
  register: qcowdisk

- name: Turn qcow image into disk
  command: >
    cp {{ virt_working_directory }}/{{ virt_image_name }} {{ virt_working_directory }}/disk.{{ virt_image_name }} 
  when: not qcowdisk.stat.exists

# !TODO: Add virt-resize
# http://libguestfs.org/virt-resize.1.html

- name: Template cloud-config
  template:
    src: user-data.j2
    dest: "{{ virt_working_directory }}/user-data"
  register: template_user_data

- name: Template meta-data
  template:
    src: meta-data.j2
    dest: "{{ virt_working_directory }}/meta-data"
  register: template_meta_data

- name: Generate joliet ISO of user-data
  command: >
    genisoimage 
      -o {{ virt_working_directory }}/user-data.iso 
      -V cidata 
      -r -J {{ virt_working_directory }}/user-data {{ virt_working_directory }}/meta-data
  when: template_user_data.changed or template_meta_data.changed

# ---------------------------------------------------------------------
# - !TODO: Automate bridge creation?
# - @dougbtv: I put notes in the readme.
# ---------------------------------------------------------------------

# - name: Check for bridge
#   shell: >
#     nmcli con show | grep -P "^{{ virt_host_bridge_devicename }}\s"
#   register: bridges_shown
#   ignore_errors: true

# - debug: "msg={{ bridges_shown }}"

# - name: nmcli add bridge
#   shell: >
#     nmcli con add type bridge ifname {{ virt_host_bridge_devicename }}
#   when: "bridges_shown.rc"

# end automate bridge creation ---------------------------------------

# @dougbtv: Sometimes I needed this when developing and changing this rapidly, it should be unnecessary in the future.
# - name: Force remove libvirt network
#   virt_net:
#     name: "{{ virt_host_bridge_name }}"
#     state: absent

- name: Create libvirt network
  virt_net:
    name: "{{ virt_host_bridge_name }}"
    command: define
    xml: '{{ lookup("template", "templates/bridge.xml.j2") }}'

- name: Activate libvirt network
  virt_net:
    name: "{{ virt_host_bridge_name }}"
    state: active

- name: Check if VM exists.
  command: >
    virsh list --all
  register: vm_list

- name: Perform virt install
  command: >
    virt-install 
      --import 
      --name {{ virt_host_hostname }}
      --ram {{ virt_host_ram }}
      --vcpus {{ virt_host_cpus }}
      --disk {{ virt_working_directory }}/disk.{{ virt_image_name }},format=qcow2,bus=virtio
      --disk {{ virt_working_directory }}/user-data.iso,device=cdrom
      --network network:{{ virt_host_bridge_name }},model=virtio
      --os-type=linux
      --os-variant=rhel7
      --noautoconsole
  when: "'{{ virt_host_hostname }}' not in vm_list.stdout"

- name: Get MAC (of first interface only)
  shell: >
    virsh dumpxml {{ virt_host_hostname }} | grep -B1 br0 | grep address | cut -d"'" -f2 | head -n1
  register: mac_address

- name: Get IP (of first interface)
  shell: >
    arp-scan --interface=br0 {{ network_cidr }}/{{ network_cidr_netmask }} | awk '/{{mac_address.stdout}}/ {print $1}'
  register: get_ip

- name: Here is your IP, unreliably on the first run.
  debug:
    msg: "To SSH to the undercloud (on the first NIC found): ssh -i ~/.ssh/some_key centos@{{ get_ip.stdout }}"

